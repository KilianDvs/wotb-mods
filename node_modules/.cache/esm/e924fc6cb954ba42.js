let arg,inquirer,chalk,fs,os,path,runInstallation,runUninstallation,package_json;_b95‍.x([["cli",()=>cli]]);_b95‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_b95‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_b95‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_b95‍.w("fs-extra",[["default",["fs"],function(v){fs=v}]]);_b95‍.w("os",[["default",["os"],function(v){os=v}]]);_b95‍.w("path",[["default",["path"],function(v){path=v}]]);_b95‍.w("./modules/install",[["default",["runInstallation"],function(v){runInstallation=v}]]);_b95‍.w("./modules/uninstall",[["default",["runUninstallation"],function(v){runUninstallation=v}]]);_b95‍.w("../package.json",[["default",["package_json"],function(v){package_json=v}]]);









function parseArgsIntoOptions(rawArgs) {
  const args = arg(
    {
      '--install': Boolean,
      '--uninstall': Boolean,
      '--help': Boolean,
      '--version': Boolean,
      '-i': '--install',
      '-u': '--uninstall',
      '-h': '--help',
      '-v': '--version',
    },
    {
      argv: rawArgs.slice(2),
      permissive: true
    }
  )
  return {
    runInstall: args["--install"] || false,
    runUninstall: args["--uninstall"] || false,
    help: args["--help"] || false,
    version: args["--version"] || false,
    mods: args._.filter(i => !i.includes("-")).length ? args._.filter(i => !i.includes("-")) : ["crewm", "guns", "techtree"],
    unknownFlags: args._.filter(i => i.includes("-")).length ? args._.filter(i => i.includes("-")) : [],
  }
}

async function handleHelpAndVersion(options) {
  if(options.help) {
    console.log(`
${chalk.bold.blue('wotb -i')} : installs the PC gun sounds, PC crew voices male and Extended tech tree mods
${chalk.bold.blue('wotb -i args')} : installs the mods provided as arguments
Here's a list of the accepted arguments :
  > ${chalk.green('crewm')} : PC crew voices male
  > ${chalk.green('crewf')} : PC crew voices female
  > ${chalk.green('crewc')} : PC crew voices custom
  > ${chalk.green('guns')} : PC gun sounds
  > ${chalk.green('techtree')} : Extended tech tree
  > ${chalk.green('avatar')} : Avatar image change
  > ${chalk.green('profilebg')} : Profile background image change
${chalk.bold.blue('wotb -u')} : uninstalls all the mods previously installed by this script
${chalk.bold.blue('wotb -v')} : shows the version of the script, which should match the version of the game
`)
    process.exit(0)
  }

  if(options.version) {
    console.log(`v${package_json.version}`)
    process.exit(0)
  }
}

async function handleUnknownFlags(options) {
  if(options.unknownFlags.length) {
    _b95‍.g.console.log(chalk.red(`Error : Unknown ${options.unknownFlags.length === 1 ? "option" : "options"} "${options.unknownFlags.join(', ')}"`))
    _b95‍.g.console.log(chalk.yellowBright(`"wotb --help" to see the options available`))
    process.exit(1)
  }
}

async function promptForMissingOptions(options) {

  const questions = []

  if(options.runInstall && options.runUninstall) {
    options.runInstall = false
    options.runUninstall = false
    questions.push({
      type: 'list',
      name: 'action',
      message: "You can't both install and uninstall mods at the same time! Do you want to install or uninstall mods?",
      choices: [ 'Install', "Uninstall" ],
      default: 'Install'
    })
  }

  if(!options.runInstall && !options.runUninstall) {
    questions.push({
      type: 'list',
      name: 'action',
      message: "Do you want to install or uninstall mods?",
      choices: [ 'Install', "Uninstall" ],
      default: 'Install'
    })
  }

  const answers = await inquirer.prompt(questions)

  if(options.runUninstall || answers.action === "Uninstall") {
    options.mods = []
  }
  else {
    options = await checkForModsValidity(options)
  }

  const paths = await createPaths()

  return {
    ...options,
    runInstall: options.runInstall || answers.action === 'Install' ? true : false,
    runUninstall: options.runUninstall || answers.action === 'Uninstall' ? true : false,
    mods: options.runUninstall || answers.action === "Uninstall" ? [] : options.mods,
    paths: paths
  }
}

async function createPaths() {

  const steamPathToData = "/Steam/steamapps/common/World of Tanks Blitz/Data"
  const AppStorePathToData = "/Applications/World of Tanks Blitz.app/Contents/Resources/Data"

  const data = 
    fs.existsSync(steamPathToData) ? steamPathToData
  : fs.existsSync(AppStorePathToData) ? AppStorePathToData
  : undefined

  const username = os.userInfo().username
  const windowsPathToImages = `C:/Users/${username}/Documents/DAVAProjects/image_cache`
  const macPathToImages = `/Users/${username}/Library/Containers/net.wargaming.wotblitz.macos/Data/Documents/DAVAProject/image_cache`

  const images =
    os.type() === "Darwin" ? macPathToImages : windowsPathToImages

  const backup = path.resolve(__dirname, "../Backup")
  const mods = path.resolve(__dirname, "../Mods")

    return {
      data,
      images,
      backup,
      mods
    }
}

async function checkForModsValidity(options) {
  
  if(!options.mods.length) return options

  const validMods = ["crewm", "crewf", "crewc", "guns", "techtree", "avatar", "profilebg"]

  if(options.mods.every(mod => validMods.includes(mod))) return options
  _b95‍.g.console.log(chalk.red("One or more of the mods you provided are invalid"))
  const answer = await inquirer.prompt({
    type: 'checkbox',
    name: 'mods',
    message: `You can choose the mods you want to install in this list`,
    choices: [
      {name: 'PC crew voices male', value: 'crewm'},
      {name: 'PC crew voices female', value: 'crewf'},
      {name: 'PC crew voices custom', value: 'crewc'},
      {name: 'PC gun sounds', value: 'guns'},
      {name: 'Extended tech tree', value: 'techtree'},
      {name: 'Avatar change', value: 'avatar'},
      {name: 'Profile background change', value: 'profilebg'}
    ],
    validate(ans) {
      if(!ans.length) {
        return 'You have to choose at least one mod to install!'
      }
      if(ans.filter(mod => mod.startsWith("crew")).length > 1) {
        return "You can't have multiple crew voices mods at the same time!"
      }
      return true
    }
  })
  
  return {
    ...options,
    mods: answer.mods
  }
}

       async function cli(args) {
  
  
  let options = parseArgsIntoOptions(args)
  await handleUnknownFlags(options)
  await handleHelpAndVersion(options)
  options = await promptForMissingOptions(options)
  //console.log(options)

  try {
    if(options.runInstall) {
      runInstallation(options)
    }
    if(options.runUninstall) runUninstallation(options)
  }
  catch(err) {
    _b95‍.g.console.log(err.message)
  }
}